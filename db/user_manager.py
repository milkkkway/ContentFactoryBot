import psycopg2
from psycopg2 import sql

class UserManager:
    def __init__(self, dbname="postgres", user="postgres", password="2323420",
                 host="localhost", port="5432"):
        self.connection_params = {
            'dbname': dbname,
            'user': user,
            'password': password,
            'host': host,
            'port': port
        }
        self.conn = None
        self.cursor = None

    def connect(self):
        try:
            self.conn = psycopg2.connect(**self.connection_params)
            self.cursor = self.conn.cursor()
            print("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            self._create_users_table()
            return True

        except psycopg2.OperationalError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            print("1. –ó–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä PostgreSQL")
            print("2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è")
            print("3. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ö–æ—Å—Ç–∞ –∏ –ø–æ—Ä—Ç–∞")
            return False
        except psycopg2.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ PostgreSQL: {e}")
            return False

    def _create_users_table(self):
        create_table_query = """
        CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            username VARCHAR(50) UNIQUE NOT NULL,
            psswrd VARCHAR(100) UNIQUE NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        """
        try:
            self.cursor.execute(create_table_query)
            self.conn.commit()
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ users –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        except psycopg2.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")

    def _check_connection(self):
        if self.conn is None or self.cursor is None:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
            return False
        return True

    def check_user_exists(self, username=None, psswrd=None):
        if not self._check_connection():
            return False

        if not username and not psswrd:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ username –∏–ª–∏ psswrd –¥–ª—è –ø–æ–∏—Å–∫–∞")
            return False

        try:
            if username and psswrd:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ª–æ–≥–∏–Ω—É –ò –ø–∞—Ä–æ–ª—é
                query = "SELECT * FROM users WHERE username = %s AND psswrd = %s"
                self.cursor.execute(query, (username, psswrd))
            elif username:
                query = "SELECT * FROM users WHERE username = %s"
                self.cursor.execute(query, (username,))
            else:
                query = "SELECT * FROM users WHERE psswrd = %s"
                self.cursor.execute(query, (psswrd,))

            user = self.cursor.fetchone()

            if user:
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ID={user[0]}, Username={user[1]}, psswrd={user[2]}")
                return True
            else:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

        except psycopg2.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False

    def create_user(self, username, psswrd):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if not self._check_connection():
            return False

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if self.check_user_exists(username=username) or self.check_user_exists(psswrd=psswrd):
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –∏–ª–∏ psswrd —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False

        try:
            insert_query = """
            INSERT INTO users (username, psswrd) 
            VALUES (%s, %s) 
            RETURNING id
            """
            self.cursor.execute(insert_query, (username, psswrd))
            user_id = self.cursor.fetchone()[0]
            self.conn.commit()

            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ! ID: {user_id}")
            return True

        except psycopg2.Error as e:
            self.conn.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False

    def get_all_users(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not self._check_connection():
            return []

        try:
            self.cursor.execute("SELECT * FROM users ORDER BY id")
            users = self.cursor.fetchall()

            if users:
                print("\nüìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
                for user in users:
                    print(f"ID: {user[0]}, Username: {user[1]}, psswrd: {user[2]}, Created: {user[3]}")
            else:
                print("üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

            return users

        except psycopg2.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

    def close_connection(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if self.cursor:
            self.cursor.close()
        if self.conn:
            self.conn.close()
        print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π PostgreSQL")

    user_manager = UserManager(
        dbname="postgres",
        user="postgres",
        password="2323420",
        host="localhost",
        port="5432"
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if not user_manager.connect():
        return

    # 1. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\n1. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    user_manager.create_user("ivan_petrov", "ivan@example.com")

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    user_manager.check_user_exists(username="ivan_petrov")

    # 3. –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º psswrd
    print("\n3. –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç:")
    user_manager.create_user("another_user", "ivan@example.com")

    # 4. –°–æ–∑–¥–∞–µ–º –µ—â–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\n4. –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    user_manager.create_user("maria_sidorova", "maria@example.com")

    # 5. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("\n5. –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    user_manager.get_all_users()

    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    user_manager.check_user_exists(username="nonexistent_user")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    user_manager.close_connection()

if __name__ == "__main__":
    main()