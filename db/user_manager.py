import logging
from db.database_manager import DatabaseManager

logger = logging.getLogger(__name__)


class UserManager:
    def __init__(self):
        self.db = DatabaseManager()
        self.current_user_id = None

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        return self.db.connect()

    def check_user_exists(self, username=None, psswrd=None, telegram_id=None):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.db.connect():
            return False

        try:
            if username and psswrd:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é (–¥–ª—è –æ–±—ã—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
                query = "SELECT id, role FROM users WHERE username = %s AND psswrd = %s"
                user = self.db.fetch_one(query, (username, psswrd))
            elif telegram_id:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ Telegram ID (–¥–ª—è –±–æ—Ç–∞)
                query = "SELECT id, role FROM users WHERE telegram_id = %s"
                user = self.db.fetch_one(query, (telegram_id,))
            elif username:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –ø–æ username
                query = "SELECT id, role FROM users WHERE username = %s"
                user = self.db.fetch_one(query, (username,))
            else:
                logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return False

            if user:
                user_id, role = user
                self.current_user_id = user_id
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ID={user_id}, Role={role}")
                return True
            else:
                logger.info("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False

    def get_user_by_username(self, username):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username"""
        if not self.db.connect():
            return None

        try:
            query = "SELECT id, username, role, telegram_id FROM users WHERE username = %s"
            result = self.db.fetch_one(query, (username,))
            if result:
                user_data = {
                    'id': result[0],
                    'username': result[1],
                    'role': result[2],
                    'telegram_id': result[3]
                }
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ username {username}: {user_data}")
                return user_data
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username: {e}")
            return None

    def update_user_telegram_id(self, username, telegram_id):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ telegram_id –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.db.connect():
            return False

        try:
            query = "UPDATE users SET telegram_id = %s WHERE username = %s"
            result = self.db.execute_query(query, (telegram_id, username))

            if result:
                logger.info(f"‚úÖ Telegram ID {telegram_id} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
                return True
            return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ telegram_id: {e}")
            return False

    def update_user_telegram_id(self, username, telegram_id):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ telegram_id –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.db.connect():
            return False

        try:
            query = "UPDATE users SET telegram_id = %s WHERE username = %s"
            result = self.db.execute_query(query, (telegram_id, username))

            if result:
                logger.info(f"‚úÖ Telegram ID {telegram_id} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
                return True
            return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ telegram_id: {e}")
            return False

    def create_user(self, username, psswrd, telegram_id=None, role='user'):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.db.connect():
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º username
        if self.check_user_exists(username=username):
            logger.error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω telegram_id, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        if telegram_id and self.check_user_exists(telegram_id=telegram_id):
            logger.error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False

        try:
            if telegram_id:
                query = """
                INSERT INTO users (username, psswrd, telegram_id, role) 
                VALUES (%s, %s, %s, %s) 
                RETURNING id
                """
                result = self.db.execute_query(query, (username, psswrd, telegram_id, role))
            else:
                query = """
                INSERT INTO users (username, psswrd, role) 
                VALUES (%s, %s, %s) 
                RETURNING id
                """
                result = self.db.execute_query(query, (username, psswrd, role))

            if result:
                logger.info(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ! Username: {username}, Role: {role}, Telegram ID: {telegram_id}")
                return True
            return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False

    def get_current_user_id(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.current_user_id

    def get_user_role(self, user_id=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.db.connect():
            return None

        try:
            query = "SELECT role FROM users WHERE id = %s"
            result = self.db.fetch_one(query, (user_id or self.current_user_id,))
            return result[0] if result else None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None

    def get_user_by_telegram_id(self, telegram_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
        if not self.db.connect():
            return None

        try:
            query = "SELECT id, username, role FROM users WHERE telegram_id = %s"
            result = self.db.fetch_one(query, (telegram_id,))
            if result:
                user_data = {
                    'id': result[0],
                    'username': result[1],
                    'role': result[2]
                }
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ Telegram ID {telegram_id}: {user_data}")
                return user_data
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None

    def get_all_users(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not self.db.connect():
            return []

        try:
            query = "SELECT id, username, role, telegram_id, created_at FROM users ORDER BY id"
            users = self.db.fetch_all(query)

            if users:
                logger.info("üìã –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                formatted_users = []
                for user in users:
                    formatted_users.append({
                        'id': user[0],
                        'username': user[1],
                        'role': user[2],
                        'telegram_id': user[3],
                        'created_at': user[4]
                    })
                return formatted_users
            return []

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

    def close_connection(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        self.db.close_connection()