import logging
from db.database_manager import DatabaseManager

logger = logging.getLogger(__name__)


class DraftManager:
    def __init__(self):
        self.db = DatabaseManager()

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        return self.db.connect()

    def create_draft(self, user_id, username, title, description, media_type, media_file_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
        logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –¥–ª—è user_id: {user_id}")

        if not self.db.connect():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return None

        try:
            # –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º INSERT
            insert_query = """
            INSERT INTO drafts (user_id, username, title, description, media_type, media_file_id) 
            VALUES (%s, %s, %s, %s, %s, %s)
            """
            insert_params = (user_id, username, title, description, media_type, media_file_id)

            insert_result = self.db.execute_query(insert_query, insert_params)

            if not insert_result:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å INSERT")
                return None

            # –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
            select_query = """
            SELECT id, created_at FROM drafts 
            WHERE user_id = %s AND title = %s 
            ORDER BY created_at DESC LIMIT 1
            """
            select_params = (user_id, title)

            result = self.db.fetch_one(select_query, select_params)

            if result:
                draft_id, created_at = result
                logger.info(f"‚úÖ –£–°–ü–ï–•: –°–æ–∑–¥–∞–Ω —á–µ—Ä–Ω–æ–≤–∏–∫ {draft_id}")
                return {
                    'id': draft_id,
                    'user_id': user_id,
                    'username': username,
                    'title': title,
                    'description': description,
                    'media_type': media_type,
                    'media_file_id': media_file_id,
                    'created_at': created_at
                }
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞")
                return None

        except Exception as e:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {e}")
            return None

    def get_user_drafts(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –í–°–ï–• —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
        logger.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –¥–ª—è user_id: {user_id}")

        if not self.db.connect():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return []

        try:
            query = """
            SELECT id, title, description, media_type, media_file_id, created_at 
            FROM drafts 
            WHERE user_id = %s 
            ORDER BY created_at DESC
            """
            drafts = self.db.fetch_all(query, (user_id,))

            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: {len(drafts) if drafts else 0}")

            formatted_drafts = []
            if drafts:
                for draft in drafts:
                    formatted_drafts.append({
                        'id': draft[0],
                        'title': draft[1],
                        'description': draft[2],
                        'media_type': draft[3],
                        'media_file_id': draft[4],
                        'created_at': draft[5]
                    })
                logger.info(f"‚úÖ –£–°–ü–ï–•: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(formatted_drafts)} —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤")
            else:
                logger.info("‚ÑπÔ∏è –ß–µ—Ä–Ω–æ–≤–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

            return formatted_drafts

        except Exception as e:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: {e}")
            return []

    def get_draft_by_id(self, draft_id, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –ø–æ ID –∏ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ {draft_id} –¥–ª—è user_id: {user_id}")

        if not self.db.connect():
            return None

        try:
            query = """
            SELECT id, user_id, username, title, description, media_type, media_file_id, created_at 
            FROM drafts 
            WHERE id = %s AND user_id = %s
            """
            draft = self.db.fetch_one(query, (draft_id, user_id))

            if draft:
                logger.info(f"‚úÖ –£–°–ü–ï–•: –ß–µ—Ä–Ω–æ–≤–∏–∫ {draft_id} –Ω–∞–π–¥–µ–Ω")
                return {
                    'id': draft[0],
                    'user_id': draft[1],
                    'username': draft[2],
                    'title': draft[3],
                    'description': draft[4],
                    'media_type': draft[5],
                    'media_file_id': draft[6],
                    'created_at': draft[7]
                }
            else:
                logger.warning(f"‚ö†Ô∏è –ß–µ—Ä–Ω–æ–≤–∏–∫ {draft_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return None

        except Exception as e:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {e}")
            return None

    def update_draft(self, draft_id, user_id, title=None, description=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ - –ø–æ Telegram ID"""
        if not self.db.connect():
            return False

        try:
            update_fields = []
            params = []

            if title is not None:
                update_fields.append("title = %s")
                params.append(title)
            if description is not None:
                update_fields.append("description = %s")
                params.append(description)

            if not update_fields:
                return False

            update_fields.append("updated_at = CURRENT_TIMESTAMP")
            params.extend([draft_id, user_id])

            query = f"UPDATE drafts SET {', '.join(update_fields)} WHERE id = %s AND user_id = %s"
            result = self.db.execute_query(query, params)

            if result and self.db.cursor.rowcount > 0:
                logger.info(f"‚úÖ –ß–µ—Ä–Ω–æ–≤–∏–∫ {draft_id} –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á—É–∂–æ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ {draft_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
            return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {e}")
            return False

    def delete_draft(self, draft_id, user_id, user_role='user'):
        """–£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ - –ø–æ Telegram ID"""
        if not self.db.connect():
            return False

        try:
            if user_role in ['admin', 'moderator']:
                # –ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –ª—é–±—ã–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏
                query = "DELETE FROM drafts WHERE id = %s"
                params = (draft_id,)
                logger.info(f"üõ°Ô∏è –ê–¥–º–∏–Ω {user_id} —É–¥–∞–ª—è–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ {draft_id}")
            else:
                # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏
                query = "DELETE FROM drafts WHERE id = %s AND user_id = %s"
                params = (draft_id, user_id)
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—è–µ—Ç —Å–≤–æ–π —á–µ—Ä–Ω–æ–≤–∏–∫ {draft_id}")

            result = self.db.execute_query(query, params)

            if result and self.db.cursor.rowcount > 0:
                logger.info(f"‚úÖ –ß–µ—Ä–Ω–æ–≤–∏–∫ {draft_id} —É–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ {draft_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
            return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {e}")
            return False

    def close_connection(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        self.db.close_connection()