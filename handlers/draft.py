import logging
from typing import Dict, Any
from aiogram import Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from utilities.states import DraftStates
from utilities.keyboards import (
    create_main_keyboard,
    create_draft_actions_keyboard,
    create_drafts_list_keyboard,
    create_cancel_keyboard
)
from db.draft_manager import DraftManager

logger = logging.getLogger(__name__)


draft_temp_store: Dict[int, Dict[str, Any]] = {}


draft_manager = DraftManager()


async def start_create_draft(message: Message, state: FSMContext):

    user_id = message.from_user.id

    await message.answer(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞:",
        parse_mode='HTML',
        reply_markup=create_cancel_keyboard()
    )
    await state.set_state(DraftStates.waiting_media)


async def process_media(message: Message, state: FSMContext):

    user_id = message.from_user.id
    media_file_id = None
    media_type = None

    if message.photo:
        media_file_id = message.photo[-1].file_id
        media_type = 'photo'
    elif message.video:
        media_file_id = message.video.file_id
        media_type = 'video'
    else:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã.",
            reply_markup=create_cancel_keyboard()
        )
        return


    draft_temp_store[user_id] = {
        'media_file_id': media_file_id,
        'media_type': media_type
    }

    await message.answer(
        "‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω!\n\n"
        "üìå –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞:",
        reply_markup=create_cancel_keyboard()
    )
    await state.set_state(DraftStates.waiting_title)


async def process_title(message: Message, state: FSMContext):

    user_id = message.from_user.id
    title = message.text.strip()

    if len(title) < 2:
        await message.answer(
            "‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—â–µ —Ä–∞–∑:",
            reply_markup=create_cancel_keyboard()
        )
        return

    if len(title) > 255:
        await message.answer(
            "‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤).\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:",
            reply_markup=create_cancel_keyboard()
        )
        return


    if user_id not in draft_temp_store:
        draft_temp_store[user_id] = {}
    draft_temp_store[user_id]['title'] = title

    await message.answer(
        "‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
        "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞ "
        "(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        reply_markup=create_cancel_keyboard()
    )
    await state.set_state(DraftStates.waiting_description)


async def process_description(message: Message, state: FSMContext):

    user_id = message.from_user.id
    description = message.text.strip()

    if description == '-':
        description = ""


    draft_data = draft_temp_store.get(user_id)
    if not draft_data:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=create_main_keyboard()
        )
        await state.clear()
        return


    if not draft_manager.connect():
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_main_keyboard()
        )
        await state.clear()
        return

    try:

        draft = draft_manager.create_draft(
            user_id=user_id,
            username=message.from_user.username or f"user_{user_id}",
            title=draft_data['title'],
            description=description,
            media_type=draft_data['media_type'],
            media_file_id=draft_data['media_file_id']
        )

        if draft:

            if user_id in draft_temp_store:
                del draft_temp_store[user_id]

            await message.answer(
                f"‚úÖ <b>–ß–µ—Ä–Ω–æ–≤–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                f"üìå <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {draft['title']}\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {draft['description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"üñºÔ∏è <b>–¢–∏–ø –º–µ–¥–∏–∞:</b> {'–§–æ—Ç–æ' if draft['media_type'] == 'photo' else '–í–∏–¥–µ–æ'}\n"
                f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {draft['created_at'].strftime('%d.%m.%Y %H:%M')}",
                parse_mode='HTML',
                reply_markup=create_main_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=create_main_keyboard()
            )

    except Exception as e:
        logger.error(f"Error creating draft: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞.",
            reply_markup=create_main_keyboard()
        )
    finally:
        draft_manager.close_connection()
        await state.clear()


async def show_my_drafts(message: Message, state: FSMContext):

    user_id = message.from_user.id

    if not draft_manager.connect():
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_main_keyboard()
        )
        return

    try:

        drafts = draft_manager.get_user_drafts(user_id)

        if not drafts:
            await message.answer(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤.\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É ¬´–°–æ–∑–¥–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫¬ª",
                reply_markup=create_main_keyboard()
            )
            return

        await message.answer(
            f"üìÇ <b>–í–∞—à–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∏</b> (–≤—Å–µ–≥–æ: {len(drafts)})\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            parse_mode='HTML',
            reply_markup=create_drafts_list_keyboard(drafts)
        )

        await state.set_state(DraftStates.viewing_drafts)

    except Exception as e:
        logger.error(f"Error getting drafts: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤.",
            reply_markup=create_main_keyboard()
        )
    finally:
        draft_manager.close_connection()


async def show_draft_details(callback: CallbackQuery, state: FSMContext):

    user_id = callback.from_user.id
    draft_id = int(callback.data.split("_")[2])

    if not draft_manager.connect():
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=create_main_keyboard()
        )
        await callback.answer()
        return

    try:

        draft = draft_manager.get_draft_by_id(draft_id, user_id)

        if not draft:
            await callback.message.answer(
                "‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É.",
                reply_markup=create_main_keyboard()
            )
            await callback.answer()
            return


        draft_text = (
            f"üìÑ <b>–ß–µ—Ä–Ω–æ–≤–∏–∫ #{draft['id']}</b>\n\n"
            f"üìå <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {draft['title']}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {draft['description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üñºÔ∏è <b>–¢–∏–ø –º–µ–¥–∏–∞:</b> {'–§–æ—Ç–æ' if draft['media_type'] == 'photo' else '–í–∏–¥–µ–æ'}\n"
            f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {draft['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
            f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {draft['username']}"
        )

        if draft['media_type'] == 'photo':
            await callback.message.answer_photo(
                photo=draft['media_file_id'],
                caption=draft_text,
                parse_mode='HTML',
                reply_markup=create_draft_actions_keyboard(draft_id)
            )
        else:
            await callback.message.answer_video(
                video=draft['media_file_id'],
                caption=draft_text,
                parse_mode='HTML',
                reply_markup=create_draft_actions_keyboard(draft_id)
            )

        await callback.answer()

    except Exception as e:
        logger.error(f"Error showing draft: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞.",
            reply_markup=create_main_keyboard()
        )
        await callback.answer()
    finally:
        draft_manager.close_connection()




async def handle_drafts_pagination(callback: CallbackQuery, state: FSMContext):

    user_id = callback.from_user.id
    page = int(callback.data.split("_")[2])

    if not draft_manager.connect():
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        return

    try:
        drafts = draft_manager.get_user_drafts(user_id)
        await callback.message.edit_reply_markup(
            reply_markup=create_drafts_list_keyboard(drafts, page)
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error paginating drafts: {e}")
        await callback.answer("–û—à–∏–±–∫–∞")
    finally:
        draft_manager.close_connection()


async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):

    await callback.message.answer(
        "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=create_main_keyboard()
    )
    await state.clear()
    await callback.answer()


async def back_to_drafts_list(callback: CallbackQuery, state: FSMContext):

    await show_my_drafts(callback.message, state)
    await callback.answer()


async def cancel_draft_creation(callback: CallbackQuery, state: FSMContext):

    user_id = callback.from_user.id


    if user_id in draft_temp_store:
        del draft_temp_store[user_id]

    await callback.message.answer(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=create_main_keyboard()
    )
    await state.clear()
    await callback.answer()


async def delete_draft(callback: CallbackQuery, state: FSMContext):

    user_id = callback.from_user.id
    draft_id = int(callback.data.split("_")[2])

    if not draft_manager.connect():
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=create_main_keyboard()
        )
        await callback.answer()
        return

    try:
        success = draft_manager.delete_draft(
            draft_id=draft_id,
            user_id=user_id,
            user_role='user'
        )

        if success:
            await callback.message.answer(
                "‚úÖ –ß–µ—Ä–Ω–æ–≤–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                reply_markup=create_main_keyboard()
            )
        else:
            await callback.message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.",
                reply_markup=create_main_keyboard()
            )

        await callback.answer()

    except Exception as e:
        logger.error(f"Error deleting draft: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞.",
            reply_markup=create_main_keyboard()
        )
        await callback.answer()
    finally:
        draft_manager.close_connection()


def register_draft_handlers(dp: Dispatcher):
    dp.message.register(start_create_draft, F.text == "üìù –°–æ–∑–¥–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫")
    dp.message.register(show_my_drafts, F.text == "üìÇ –ú–æ–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∏")

    dp.message.register(process_media, DraftStates.waiting_media)
    dp.message.register(process_title, DraftStates.waiting_title)
    dp.message.register(process_description, DraftStates.waiting_description)


    dp.callback_query.register(show_draft_details, F.data.startswith("view_draft_"))
    dp.callback_query.register(handle_drafts_pagination, F.data.startswith("drafts_page_"))
    dp.callback_query.register(delete_draft, F.data.startswith("delete_draft_"))
    dp.callback_query.register(back_to_main_menu, F.data == "back_to_main")
    dp.callback_query.register(back_to_drafts_list, F.data == "back_to_drafts")
    dp.callback_query.register(cancel_draft_creation, F.data == "cancel_draft")