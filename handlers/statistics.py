import logging
from typing import Dict, Any
from aiogram import Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

import api.YouTubeApi as YouTubeApi
from utilities.states import StatsStates
from utilities.keyboards import (
    create_region_keyboard,
    create_channel_navigation_keyboard
)
from utilities.formatters import format_number, format_channel_message, format_video_message

logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data_store: Dict[int, Dict[str, Any]] = {}

# ========== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ==========

async def start_statistics(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await message.answer(
        "üîç <b>–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤:</b>\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä: —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–±–∑–æ—Ä—ã, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –≥–µ–π–º–∏–Ω–≥</i>",
        parse_mode='HTML'
    )
    await state.set_state(StatsStates.waiting_keyword)

async def process_keyword(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    keyword = message.text.strip()

    if len(keyword) < 2:
        await message.answer("‚ùå <b>–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å.</b> –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞:", parse_mode='HTML')
        return

    await state.update_data(keyword=keyword)
    await message.answer(
        "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞:</b>",
        reply_markup=create_region_keyboard(),
        parse_mode='HTML'
    )
    await state.set_state(StatsStates.waiting_region)

async def process_region(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞"""
    region = callback.data.split("_")[1]
    await state.update_data(region=region)

    await callback.message.edit_text(
        f"üåç <b>–†–µ–≥–∏–æ–Ω:</b> {region}\n\n"
        "üìä <b>–°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞?</b>\n\n"
        "<i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 5-10 –≤–∏–¥–µ–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞</i>",
        parse_mode='HTML'
    )

    await callback.answer()
    await state.set_state(StatsStates.waiting_num_posts)

async def process_num_posts(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤"""
    try:
        num_posts = int(message.text)
        if num_posts < 1 or num_posts > 50:
            await message.answer("‚ùå <b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50:</b>", parse_mode='HTML')
            return
    except ValueError:
        await message.answer("‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:</b>", parse_mode='HTML')
        return

    await state.update_data(num_posts=num_posts)
    await message.answer(
        "üë• <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:</b>\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä: 10000 - —Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª—ã —Å 10–ö+ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</i>",
        parse_mode='HTML'
    )
    await state.set_state(StatsStates.waiting_min_subs)

async def process_min_subs(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
    try:
        min_subs = int(message.text)
        if min_subs < 0:
            await message.answer("‚ùå <b>–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º:</b>", parse_mode='HTML')
            return
    except ValueError:
        await message.answer("‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:</b>", parse_mode='HTML')
        return

    await state.update_data(min_subs=min_subs)
    await message.answer(
        "üé¨ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ —É –∫–∞–Ω–∞–ª–∞:</b>\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä: 10 - –∏—Å–∫–ª—é—á–∞–µ—Ç –Ω–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞</i>",
        parse_mode='HTML'
    )
    await state.set_state(StatsStates.waiting_min_vids)

async def process_min_vids(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ –∏ –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        min_vids = int(message.text)
        if min_vids < 0:
            await message.answer("‚ùå <b>–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º:</b>", parse_mode='HTML')
            return
    except ValueError:
        await message.answer("‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:</b>", parse_mode='HTML')
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    user_data = await state.get_data()
    await state.update_data(min_vids=min_vids)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    summary_text = (
        "‚úÖ <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞:</b>\n\n"
        f"üîç <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> {user_data['keyword']}\n"
        f"üåç <b>–†–µ–≥–∏–æ–Ω:</b> {user_data['region']}\n"
        f"üìä <b>–í–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:</b> {user_data['num_posts']}\n"
        f"üë• <b>–ú–∏–Ω. –ø–æ–¥–ø–∏—Å—á–∏–∫–∏:</b> {format_number(user_data['min_subs'])}\n"
        f"üé¨ <b>–ú–∏–Ω. –≤–∏–¥–µ–æ:</b> {min_vids}\n\n"
        "‚è≥ <i>–ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.</i>"
    )

    progress_msg = await message.answer(summary_text, parse_mode='HTML')

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        results = YouTubeApi.main(
            search_query=user_data['keyword'],
            region=user_data['region'],
            num_posts=user_data['num_posts'],
            min_subscribers=user_data['min_subs'],
            min_videos=min_vids
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        user_data_store[message.from_user.id] = {
            'channels': results,
            'current_channel_index': 0
        }

        if not results or (isinstance(results, str) and "ERROR" in results):
            await progress_msg.edit_text(
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.",
                parse_mode='HTML'
            )
            await state.clear()
            return

        if isinstance(results, str):
            await progress_msg.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {results}",
                parse_mode='HTML'
            )
            await state.clear()
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª
        await show_channel(message.from_user.id, progress_msg, state)

    except Exception as e:
        logger.error(f"Error during analysis: {e}")
        await progress_msg.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ.</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.",
            parse_mode='HTML'
        )
        await state.clear()

async def show_channel(user_id: int, message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
    user_data = user_data_store.get(user_id)
    if not user_data or not user_data['channels']:
        await message.edit_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    channels = user_data['channels']
    current_index = user_data['current_channel_index']

    if current_index >= len(channels):
        await message.edit_text(
            "‚úÖ <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
            "–í—Å–µ –∫–∞–Ω–∞–ª—ã –ø–æ–∫–∞–∑–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
            parse_mode='HTML'
        )
        await state.clear()
        return

    channel = channels[current_index]
    channel_text = format_channel_message(channel)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞ –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    channel_text = (
        f"üìä <b>–ö–∞–Ω–∞–ª {current_index + 1} –∏–∑ {len(channels)}</b>\n\n"
        f"{channel_text}"
    )

    await message.edit_text(
        channel_text,
        reply_markup=create_channel_navigation_keyboard(current_index, len(channels)),
        parse_mode='HTML'
    )

    await state.set_state(StatsStates.showing_results)

async def show_next_channel(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–Ω–∞–ª"""
    user_id = callback.from_user.id
    user_data = user_data_store.get(user_id)

    if not user_data:
        await callback.answer("–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏")
        return

    channels = user_data['channels']
    current_index = user_data['current_channel_index']

    if current_index >= len(channels) - 1:
        await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–Ω–∞–ª")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
    user_data_store[user_id]['current_channel_index'] = current_index + 1

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–Ω–∞–ª
    await show_channel(user_id, callback.message, state)
    await callback.answer()

async def show_prev_channel(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–∞–Ω–∞–ª"""
    user_id = callback.from_user.id
    user_data = user_data_store.get(user_id)

    if not user_data:
        await callback.answer("–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏")
        return

    current_index = user_data['current_channel_index']

    if current_index <= 0:
        await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
    user_data_store[user_id]['current_channel_index'] = current_index - 1

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–∞–Ω–∞–ª
    await show_channel(user_id, callback.message, state)
    await callback.answer()

async def show_channel_details(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –∫–∞–Ω–∞–ª–∞"""
    channel_index = int(callback.data.split("_")[2])
    user_id = callback.from_user.id

    user_data = user_data_store.get(user_id)
    if not user_data:
        await callback.answer("–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
        return

    channels = user_data['channels']
    if channel_index >= len(channels):
        await callback.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∫–∞–Ω–∞–ª–∞
    user_data_store[user_id]['current_channel_index'] = channel_index

    channel = channels[channel_index]
    videos = channel['posts']

    if not videos:
        await callback.message.answer(
            "‚ùå <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞</b>",
            parse_mode='HTML'
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ
    video = videos[0]
    video_text = (
        f"üé¨ <b>{channel['channel_title']}</b>\n"
        f"üìπ <b>–í–∏–¥–µ–æ 1 –∏–∑ {len(videos)}</b>\n\n"
        f"{format_video_message(video)}"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–µ–æ
    user_data_store[user_id]['current_video_index'] = 0
    user_data_store[user_id]['current_channel_details'] = channel_index

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≤–∏–¥–µ–æ
    builder = InlineKeyboardBuilder()
    if len(videos) > 1:
        builder.row(InlineKeyboardButton(
            text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ",
            callback_data=f"next_video_{channel_index}"
        ))
    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞–Ω–∞–ª–∞–º",
        callback_data="back_to_channels"
    ))

    await callback.message.answer(
        video_text,
        reply_markup=builder.as_markup(),
        parse_mode='HTML',
        disable_web_page_preview=True
    )

    await callback.answer()

async def show_next_video(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ –∫–∞–Ω–∞–ª–∞"""
    user_id = callback.from_user.id
    user_data = user_data_store.get(user_id)

    if not user_data:
        await callback.answer("–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏")
        return

    channel_index = user_data.get('current_channel_details')
    if channel_index is None:
        await callback.answer("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
        return

    channel = user_data['channels'][channel_index]
    videos = channel['posts']
    current_video_index = user_data.get('current_video_index', 0) + 1

    if current_video_index >= len(videos):
        await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
    user_data_store[user_id]['current_video_index'] = current_video_index

    video = videos[current_video_index]
    video_text = (
        f"üé¨ <b>{channel['channel_title']}</b>\n"
        f"üìπ <b>–í–∏–¥–µ–æ {current_video_index + 1} –∏–∑ {len(videos)}</b>\n\n"
        f"{format_video_message(video)}"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    builder = InlineKeyboardBuilder()

    if current_video_index > 0:
        builder.row(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ", callback_data=f"prev_video_{channel_index}"),
            InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ", callback_data=f"next_video_{channel_index}")
        )
    else:
        builder.row(InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ", callback_data=f"next_video_{channel_index}"))

    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞–Ω–∞–ª–∞–º", callback_data="back_to_channels"))

    await callback.message.edit_text(
        video_text,
        reply_markup=builder.as_markup(),
        parse_mode='HTML',
        disable_web_page_preview=True
    )

    await callback.answer()

async def show_prev_video(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–∏–¥–µ–æ –∫–∞–Ω–∞–ª–∞"""
    user_id = callback.from_user.id
    user_data = user_data_store.get(user_id)

    if not user_data:
        await callback.answer("–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏")
        return

    channel_index = user_data.get('current_channel_details')
    if channel_index is None:
        await callback.answer("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
        return

    current_video_index = user_data.get('current_video_index', 0) - 1

    if current_video_index < 0:
        await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
    user_data_store[user_id]['current_video_index'] = current_video_index

    channel = user_data['channels'][channel_index]
    videos = channel['posts']
    video = videos[current_video_index]

    video_text = (
        f"üé¨ <b>{channel['channel_title']}</b>\n"
        f"üìπ <b>–í–∏–¥–µ–æ {current_video_index + 1} –∏–∑ {len(videos)}</b>\n\n"
        f"{format_video_message(video)}"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    builder = InlineKeyboardBuilder()

    if current_video_index < len(videos) - 1:
        builder.row(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ", callback_data=f"prev_video_{channel_index}"),
            InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ", callback_data=f"next_video_{channel_index}")
        )
    else:
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ", callback_data=f"prev_video_{channel_index}"))

    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞–Ω–∞–ª–∞–º", callback_data="back_to_channels"))

    await callback.message.edit_text(
        video_text,
        reply_markup=builder.as_markup(),
        parse_mode='HTML',
        disable_web_page_preview=True
    )

    await callback.answer()

async def back_to_channels(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤"""
    user_id = callback.from_user.id
    user_data = user_data_store.get(user_id)

    if user_data:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª
        await show_channel(user_id, callback.message, state)
    else:
        await callback.message.edit_text(
            "‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é /start",
            parse_mode='HTML'
        )
        await state.clear()

    await callback.answer()

def register_statistics_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    dp.message.register(start_statistics, F.text == "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    dp.message.register(process_keyword, StatsStates.waiting_keyword)
    dp.message.register(process_num_posts, StatsStates.waiting_num_posts)
    dp.message.register(process_min_subs, StatsStates.waiting_min_subs)
    dp.message.register(process_min_vids, StatsStates.waiting_min_vids)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    dp.callback_query.register(process_region, F.data.startswith("region_"))
    dp.callback_query.register(show_channel_details, F.data.startswith("channel_details_"))
    dp.callback_query.register(show_next_video, F.data.startswith("next_video_"))
    dp.callback_query.register(show_prev_video, F.data.startswith("prev_video_"))
    dp.callback_query.register(back_to_channels, F.data == "back_to_channels")
    dp.callback_query.register(show_next_channel, F.data.startswith("next_channel_"))
    dp.callback_query.register(show_prev_channel, F.data.startswith("prev_channel_"))