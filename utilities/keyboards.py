from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

def create_login_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–í–æ–π—Ç–∏")],
            [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")]
        ],
        resize_keyboard=True
    )
    return keyboard

def create_main_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ],
        resize_keyboard=True
    )
    return keyboard


def create_region_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üá∑üá∫ –†–æ—Å—Å–∏—è", callback_data="region_RU"),
        InlineKeyboardButton(text="üá∫üá∏ –°–®–ê", callback_data="region_US")
    )
    return builder.as_markup()


def create_channel_navigation_keyboard(current_index: int, total_channels: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º"""
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons = []
    if current_index > 0:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"prev_channel_{current_index}"))

    buttons.append(InlineKeyboardButton(text="üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"channel_details_{current_index}"))

    if current_index < total_channels - 1:
        buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data=f"next_channel_{current_index}"))

    builder.row(*buttons)



    return builder.as_markup()


def create_channel_details_keyboard(channel_index: int, total_channels: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ü–æ–¥—Ä–æ–±–Ω–µ–µ' –¥–ª—è –∫–∞–Ω–∞–ª–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
    builder = InlineKeyboardBuilder()

    # –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
    builder.row(InlineKeyboardButton(
        text="üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∏–¥–µ–æ",
        callback_data=f"channel_details_{channel_index}"
    ))

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏
    nav_buttons = []
    if channel_index > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥. –∫–∞–Ω–∞–ª", callback_data=f"prev_channel_{channel_index}"))

    nav_buttons.append(InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É", callback_data="back_to_channels"))

    if channel_index < total_channels - 1:
        nav_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥. –∫–∞–Ω–∞–ª ‚û°Ô∏è", callback_data=f"next_channel_{channel_index}"))

    builder.row(*nav_buttons)

    return builder.as_markup()


def create_back_to_channels_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥ –∫ –∫–∞–Ω–∞–ª–∞–º'"""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞–Ω–∞–ª–∞–º",
        callback_data="back_to_channels"
    ))
    return builder.as_markup()